import { z } from 'zod';

export const dataGifSchema = z.object({
    name: z.string().optional(),
    name_encoded: z.string().optional(),
    subcategories: z.array(z.object({ name: z.string(), name_encoded: z.string() })).optional(),
    gif: z.object({
        type: z.string(),
        id: z.string(),
        url: z.string(),
        slug: z.string(),
        bitly_gif_url: z.string(),
        bitly_url: z.string(),
        embed_url: z.string(),
        username: z.string(),
        source: z.string(),
        title: z.string(),
        rating: z.string(),
        content_url: z.string(),
        source_tld: z.string(),
        source_post_url: z.string(),
        is_sticker: z.number(),
        import_datetime: z.string(),
        trending_datetime: z.string(),
        create_datetime: z.string(),
        update_datetime: z.string(),
        images: z.object({
            fixed_width_still: z.object({
                height: z.string(),
                size: z.string(),
                url: z.string(),
                width: z.string(),
            }),
            preview_gif: z.object({
                height: z.string(),
                size: z.string(),
                url: z.string(),
                width: z.string(),
            }),
            fixed_height_downsampled: z.object({
                height: z.string(),
                size: z.string(),
                url: z.string(),
                webp: z.string(),
                webp_size: z.string(),
                width: z.string(),
            }),
            preview: z.object({
                height: z.string(),
                mp4: z.string(),
                mp4_size: z.string(),
                width: z.string(),
            }),
            fixed_height_small: z.object({
                height: z.string(),
                mp4: z.string(),
                mp4_size: z.string(),
                size: z.string(),
                url: z.string(),
                webp: z.string(),
                webp_size: z.string(),
                width: z.string(),
            }),
            downsized: z.object({
                height: z.string(),
                size: z.string(),
                url: z.string(),
                width: z.string(),
            }),
            fixed_width_downsampled: z.object({
                height: z.string(),
                size: z.string(),
                url: z.string(),
                webp: z.string(),
                webp_size: z.string(),
                width: z.string(),
            }),
            fixed_width: z.object({
                height: z.string(),
                mp4: z.string(),
                mp4_size: z.string(),
                size: z.string(),
                url: z.string(),
                webp: z.string(),
                webp_size: z.string(),
                width: z.string(),
            }),
            downsized_still: z.object({
                height: z.string(),
                size: z.string(),
                url: z.string(),
                width: z.string(),
            }),
            downsized_medium: z.object({
                height: z.string(),
                size: z.string(),
                url: z.string(),
                width: z.string(),
            }),
            original_mp4: z.object({
                height: z.string(),
                mp4: z.string(),
                mp4_size: z.string(),
                width: z.string(),
            }),
            downsized_large: z.object({
                height: z.string(),
                size: z.string(),
                url: z.string(),
                width: z.string(),
            }),
            preview_webp: z.object({
                height: z.string(),
                size: z.string(),
                url: z.string(),
                width: z.string(),
            }),
            original: z.object({
                frames: z.string(),
                hash: z.string(),
                height: z.string(),
                mp4: z.string(),
                mp4_size: z.string(),
                size: z.string(),
                url: z.string(),
                webp: z.string(),
                webp_size: z.string(),
                width: z.string(),
            }),
            original_still: z.object({
                height: z.string(),
                size: z.string(),
                url: z.string(),
                width: z.string(),
            }),
            fixed_height_small_still: z.object({
                height: z.string(),
                size: z.string(),
                url: z.string(),
                width: z.string(),
            }),
            fixed_width_small: z.object({
                height: z.string(),
                mp4: z.string(),
                mp4_size: z.string(),
                size: z.string(),
                url: z.string(),
                webp: z.string(),
                webp_size: z.string(),
                width: z.string(),
            }),
            looping: z.object({ mp4: z.string(), mp4_size: z.string() }),
            downsized_small: z.object({
                height: z.string(),
                mp4: z.string(),
                mp4_size: z.string(),
                width: z.string(),
            }),
            fixed_width_small_still: z.object({
                height: z.string(),
                size: z.string(),
                url: z.string(),
                width: z.string(),
            }),
            fixed_height_still: z.object({
                height: z.string(),
                size: z.string(),
                url: z.string(),
                width: z.string(),
            }),
            fixed_height: z.object({
                height: z.string(),
                mp4: z.string(),
                mp4_size: z.string(),
                size: z.string(),
                url: z.string(),
                webp: z.string(),
                webp_size: z.string(),
                width: z.string(),
            }),
            '480w_still': z.object({
                url: z.string(),
                width: z.string(),
                height: z.string(),
            }),
        }),
        user: z
            .object({
                avatar_url: z.string(),
                banner_image: z.string(),
                banner_url: z.string(),
                profile_url: z.string(),
                username: z.string(),
                display_name: z.string(),
                description: z.string(),
                is_verified: z.boolean(),
                website_url: z.string(),
                instagram_url: z.string(),
            })
            .optional(),
        analytics_response_payload: z.string().optional(),
        analytics: z
            .object({
                onload: z.object({ url: z.string() }),
                onclick: z.object({ url: z.string() }),
                onsent: z.object({ url: z.string() }),
            })
            .optional(),
        alt_text: z.string().optional(),
    }),
});

export type dataGifType = z.infer<typeof dataGifSchema>;

export const gifSchema = z.object({
    data: z.array(dataGifSchema),
    meta: z.object({
        status: z.number(),
        msg: z.string(),
        response_id: z.string(),
    }),
    pagination: z.object({
        total_count: z.number(),
        count: z.number(),
        offset: z.number(),
    }),
});

export type GifType = z.infer<typeof gifSchema>;
